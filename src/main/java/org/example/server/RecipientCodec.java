package org.example.server;
import org.bson.BsonReader;
import org.bson.BsonType;
import org.bson.BsonWriter;
import org.bson.codecs.Codec;
import org.bson.codecs.DecoderContext;
import org.bson.codecs.EncoderContext;
import org.bson.types.ObjectId;
import org.example.model.Recipient;

public class RecipientCodec implements Codec<Recipient> {
    @Override
    public void encode(BsonWriter writer, Recipient recipient, EncoderContext encoderContext) {
        writer.writeStartDocument();
        writer.writeObjectId("_id", new ObjectId()); // Assuming you want to auto-generate an ObjectId for the recipient
        writer.writeInt32("id", recipient.getId());
        writer.writeString("firstName", recipient.getFirstName());
        writer.writeString("lastName", recipient.getLastName());
        writer.writeString("address", recipient.getAddress());
        writer.writeString("phoneNumber", recipient.getPhoneNumber());
        writer.writeString("email", recipient.getEmail());
        writer.writeEndDocument();
    }

    @Override
    public Recipient decode(BsonReader reader, DecoderContext decoderContext) {
        reader.readStartDocument();
        reader.readObjectId(); // Consume the ObjectId field, assuming it's autogenerated
        int id = reader.readInt32("id");
        String firstName = reader.readString("firstName");
        String lastName = reader.readString("lastName");
        String address = reader.readString("address");
        String phoneNumber = reader.readString("phoneNumber");
        String email = reader.readString("email");
        reader.readEndDocument();

        return new Recipient(id, firstName, lastName, address, phoneNumber, email);
    }

    @Override
    public Class<Recipient> getEncoderClass() {
        return Recipient.class;
    }
}
